//AUTOGENERATED FILE. Do not make any manual changes. Any changes to this file will be overwritten.

using Scada.AddIn.Contracts.MessageControl;

namespace zenonExtensions
{
  public static class MessageExtension
  {
/// Sets Subject
    public static void SetTitle(this IMessage messageControlMessage, string value)
    {
      messageControlMessage.SetDynamicProperty("Title", value);
    }

/// Gets Subject
    public static string GetTitle(this IMessage messageControlMessage)
    {
      return (string) messageControlMessage.GetDynamicProperty("Title");
    }

/// Sets Message
    public static void SetMessageText(this IMessage messageControlMessage, string value)
    {
      messageControlMessage.SetDynamicProperty("MessageText", value);
    }

/// Gets Message
    public static string GetMessageText(this IMessage messageControlMessage)
    {
      return (string) messageControlMessage.GetDynamicProperty("MessageText");
    }

/// Sets Tries
    public static void SetAttempts(this IMessage messageControlMessage, short value)
    {
      messageControlMessage.SetDynamicProperty("Attempts", value);
    }

/// Gets Tries
    public static short GetAttempts(this IMessage messageControlMessage)
    {
      return (short) messageControlMessage.GetDynamicProperty("Attempts");
    }

/// Sets Maximum attempts
    public static void SetMaxAttempts(this IMessage messageControlMessage, short value)
    {
      messageControlMessage.SetDynamicProperty("MaxAttempts", value);
    }

/// Gets Maximum attempts
    public static short GetMaxAttempts(this IMessage messageControlMessage)
    {
      return (short) messageControlMessage.GetDynamicProperty("MaxAttempts");
    }

/// Sets Created/last sending
    public static void SetSent(this IMessage messageControlMessage, uint value)
    {
      messageControlMessage.SetDynamicProperty("Sent", value);
    }

/// Gets Created/last sending
    public static uint GetSent(this IMessage messageControlMessage)
    {
      return (uint) messageControlMessage.GetDynamicProperty("Sent");
    }

/// Sets Next try
    public static void SetSend(this IMessage messageControlMessage, uint value)
    {
      messageControlMessage.SetDynamicProperty("Send", value);
    }

/// Gets Next try
    public static uint GetSend(this IMessage messageControlMessage)
    {
      return (uint) messageControlMessage.GetDynamicProperty("Send");
    }

/// Sets Target
    public static void SetDestination(this IMessage messageControlMessage, string value)
    {
      messageControlMessage.SetDynamicProperty("Destination", value);
    }

/// Gets Target
    public static string GetDestination(this IMessage messageControlMessage)
    {
      return (string) messageControlMessage.GetDynamicProperty("Destination");
    }

/// Sets Sending mode (ID)
    public static void SetDispatchType(this IMessage messageControlMessage, short value)
    {
      messageControlMessage.SetDynamicProperty("DispatchType", value);
    }

/// Gets Sending mode (ID)
    public static short GetDispatchType(this IMessage messageControlMessage)
    {
      return (short) messageControlMessage.GetDynamicProperty("DispatchType");
    }

/// Sets SendingMode
    public static void SetSendingMode(this IMessage messageControlMessage, short value)
    {
      messageControlMessage.SetDynamicProperty("SendingMode", value);
    }

/// Gets SendingMode
    public static short GetSendingMode(this IMessage messageControlMessage)
    {
      return (short) messageControlMessage.GetDynamicProperty("SendingMode");
    }

/// Sets Count of sent cycles
    public static void SetCycleCounter(this IMessage messageControlMessage, uint value)
    {
      messageControlMessage.SetDynamicProperty("CycleCounter", value);
    }

/// Gets Count of sent cycles
    public static uint GetCycleCounter(this IMessage messageControlMessage)
    {
      return (uint) messageControlMessage.GetDynamicProperty("CycleCounter");
    }

/// Sets Timeout
    public static void SetTimeToWait(this IMessage messageControlMessage, short value)
    {
      messageControlMessage.SetDynamicProperty("TimeToWait", value);
    }

/// Gets Timeout
    public static short GetTimeToWait(this IMessage messageControlMessage)
    {
      return (short) messageControlMessage.GetDynamicProperty("TimeToWait");
    }

/// Sets Acknowledgement mandatory
    public static void SetAckReq(this IMessage messageControlMessage, bool value)
    {
      messageControlMessage.SetDynamicProperty("AckReq", value);
    }

/// Gets Acknowledgement mandatory
    public static bool GetAckReq(this IMessage messageControlMessage)
    {
      return (bool) messageControlMessage.GetDynamicProperty("AckReq");
    }

/// Sets Sending mode methode (ID)
    public static void SetTypeStyle(this IMessage messageControlMessage, ushort value)
    {
      messageControlMessage.SetDynamicProperty("TypeStyle", value);
    }

/// Gets Sending mode methode (ID)
    public static ushort GetTypeStyle(this IMessage messageControlMessage)
    {
      return (ushort) messageControlMessage.GetDynamicProperty("TypeStyle");
    }

/// Sets GroupSendingMethod
    public static void SetGroupSendingMethod(this IMessage messageControlMessage, ushort value)
    {
      messageControlMessage.SetDynamicProperty("GroupSendingMethod", value);
    }

/// Gets GroupSendingMethod
    public static ushort GetGroupSendingMethod(this IMessage messageControlMessage)
    {
      return (ushort) messageControlMessage.GetDynamicProperty("GroupSendingMethod");
    }

/// Sets Attachment
    public static void SetAttachment(this IMessage messageControlMessage, string value)
    {
      messageControlMessage.SetDynamicProperty("Attachment", value);
    }

/// Gets Attachment
    public static string GetAttachment(this IMessage messageControlMessage)
    {
      return (string) messageControlMessage.GetDynamicProperty("Attachment");
    }

/// Sets Function specific codes
    public static void SetCodesFromFunction(this IMessage messageControlMessage, bool value)
    {
      messageControlMessage.SetDynamicProperty("CodesFromFunction", value);
    }

/// Gets Function specific codes
    public static bool GetCodesFromFunction(this IMessage messageControlMessage)
    {
      return (bool) messageControlMessage.GetDynamicProperty("CodesFromFunction");
    }

/// Sets Acknowledgement timeout
    public static void SetAckTimeOut(this IMessage messageControlMessage, uint value)
    {
      messageControlMessage.SetDynamicProperty("AckTimeOut", value);
    }

/// Gets Acknowledgement timeout
    public static uint GetAckTimeOut(this IMessage messageControlMessage)
    {
      return (uint) messageControlMessage.GetDynamicProperty("AckTimeOut");
    }

/// Sets Target type (ID)
    public static void SetDestiType(this IMessage messageControlMessage, short value)
    {
      messageControlMessage.SetDynamicProperty("DestiType", value);
    }

/// Gets Target type (ID)
    public static short GetDestiType(this IMessage messageControlMessage)
    {
      return (short) messageControlMessage.GetDynamicProperty("DestiType");
    }

/// Sets RecipientType
    public static void SetRecipientType(this IMessage messageControlMessage, short value)
    {
      messageControlMessage.SetDynamicProperty("RecipientType", value);
    }

/// Gets RecipientType
    public static short GetRecipientType(this IMessage messageControlMessage)
    {
      return (short) messageControlMessage.GetDynamicProperty("RecipientType");
    }

/// Sets Custom Identifier
    public static void SetCustomIdentifier(this IMessage messageControlMessage, string value)
    {
      messageControlMessage.SetDynamicProperty("CustomIdentifier", value);
    }

/// Gets Custom Identifier
    public static string GetCustomIdentifier(this IMessage messageControlMessage)
    {
      return (string) messageControlMessage.GetDynamicProperty("CustomIdentifier");
    }

/// Sets GUID
    public static void SetGUID(this IMessage messageControlMessage, string value)
    {
      messageControlMessage.SetDynamicProperty("GUID", value);
    }

/// Gets GUID
    public static string GetGUID(this IMessage messageControlMessage)
    {
      return (string) messageControlMessage.GetDynamicProperty("GUID");
    }

/// Sets Recipient name
    public static void SetUserName(this IMessage messageControlMessage, string value)
    {
      messageControlMessage.SetDynamicProperty("UserName", value);
    }

/// Gets Recipient name
    public static string GetUserName(this IMessage messageControlMessage)
    {
      return (string) messageControlMessage.GetDynamicProperty("UserName");
    }

  }
}